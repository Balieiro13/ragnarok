import os
from dotenv import load_dotenv
from fastapi import FastAPI

from langserve import add_routes
from langchain.vectorstores.chroma import Chroma
from langchain.llms.huggingface_text_gen_inference import HuggingFaceTextGenInference
from langchain.schema.runnable import ConfigurableField

from knowledge_base.config import KBConfig
from knowledge_base.embeddings.embedding_functions import HuggingFaceTEI
from chain.retrieval import retrieval_qa


load_dotenv()

mistral_template = '''[INST] \
    You are Geffen, a helpful AI assistant that gives a \
    response to a request based on the following context. \
    Only return the response and nothing more.
    Context: {context}

    Request: {request}

    Response:[/INST]'''


db_config = KBConfig(
        host=os.getenv("DB_HOST"),
        embedding_fn=HuggingFaceTEI(
            model=os.getenv("EMBEDDING_FN_SERVER")
        )
    )
retriever = Chroma(
        client=db_config.client,
        collection_name="pf2e",
        embedding_function=db_config.embedding_fn,
    ).as_retriever(
        search_type="mmr",
        search_kwargs={'k': 10, 
                       'fetch_k': 50,
                       'lambda_mult': 0.85}
    )
llm = HuggingFaceTextGenInference(
        inference_server_url=os.getenv("LLM_SERVER"),
        max_new_tokens=1024,
        do_sample=True,
        top_k=10,
        top_p=0.95,
        temperature=0.4,
        repetition_penalty=1.1,
    ).configurable_fields(
        max_new_tokens=ConfigurableField(
            id="llm_max_new_tokens",
            name="LLM Max News Tokens",
            description="Max tokens to be generated by the LLM",
        ), 
        temperature=ConfigurableField(
            id="llm_temperature",
            name="LLM Temperature",
            description="The temperature of the LLM",
        ),
    )
chain = retrieval_qa(llm, mistral_template, retriever)

app = FastAPI(
    title="LangChain Server",
    version="1.0",
    description="Spin up a simple api server using Langchain's Runnable interfaces",
)
add_routes(app, chain)

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8001)
